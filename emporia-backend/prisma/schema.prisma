generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuarios {
  id            String      @id @default(uuid())
  senha         String
  nome          String
  email         String
  data_admissao DateTime?
  status        Status
  tipo_usuario  TipoUsuario
  horas_uteis   Int?

  created_at DateTime @default(now())
  updated_at  DateTime @updatedAt

  id_setor  Int
  id_funcao Int

  CodigosRecuperacaoSenha CodigosRecuperacaoSenha[]
  SquadIntegrantes        SquadIntegrantes[]
  Projeto                 Projeto[]
  funcao                  Funcao                    @relation(fields: [id_funcao], references: [id])
  setor                   Setor                     @relation(fields: [id_setor], references: [id])

  @@map("usuarios")
}

model Setor {
  id       Int        @id @default(autoincrement())
  nome     String
  status   Status
  Usuarios Usuarios[]

  created_at DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("setor")
}

model Funcao {
  id       Int        @id @default(autoincrement())
  nome     String
  status   Status
  Usuarios Usuarios[]

  created_at DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("funcao")
}

model Grupos {
  id         Int          @id @default(autoincrement())
  nome       String
  status     String?      @default("ATIVO")
  created_at DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  items      GrupoItems[]

  @@map("grupos")
}

model Items {
  id         Int          @id @default(autoincrement())
  descricao  String
  valor      Float        @default(0.00)
  status     String?      @default("ATIVO")
  created_at DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  grupos     GrupoItems[]

  @@map("items")
}

model GrupoItems {
  id_grupo Int
  id_item  Int
  grupo    Grupos @relation(fields: [id_grupo], references: [id])
  item     Items  @relation(fields: [id_item], references: [id])

  created_at DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@id([id_grupo, id_item])
  @@map("grupo_items")
}

model Clientes {
  id        Int        @id @default(autoincrement())
  nome      String
  documento String
  contatos  Contatos[]

  centro_de_custo    CentroDeCustos @relation(fields: [id_centro_de_custo], references: [id])
  id_centro_de_custo Int

  uf         String
  cidade     String
  rua        String
  bairro     String
  numero     String
  observacao String

  status String?

  created_at DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("clientes")
}

model Contatos {
  id         Int      @id @default(autoincrement())
  nome       String
  telefone   String
  email      String
  id_cliente Int
  cliente    Clientes @relation(fields: [id_cliente], references: [id])

  created_at DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("contatos")
}

model CentroDeCustos {
  id        Int        @id @default(autoincrement())
  nome      String
  descricao String
  clientes  Clientes[]

  status     String?  @default("ATIVO")
  created_at DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("centro_de_custos")
}

model Jobs {
  id        Int    @id @default(autoincrement())
  nome      String
  descricao String

  created_at DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  Projeto    Projeto[]

  @@map("jobs")
}

model ClasseProjeto {
  id        Int    @id @default(autoincrement())
  descricao String

  created_at DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("classe_projeto")
}

model CondicaoDePagamento {
  id              Int    @id @default(autoincrement())
  descricao       String
  quantidade_dias Int

  status Status? @default(ATIVO)

  created_at DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("condicao_de_pagamento")
}

model CodigosRecuperacaoSenha {
  id         Int      @id @default(autoincrement())
  codigo     Int
  id_usuario String
  usuario    Usuarios @relation(fields: [id_usuario], references: [id])

  created_at DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("codigos_recuperacao_senha")
}

model Squad {
  id     Int     @id @default(autoincrement())
  nome   String
  logo   String
  status Status? @default(ATIVO)

  squadIntegrantes SquadIntegrantes[]

  @@map("squad")
}

model SquadIntegrantes {
  id         Int    @id @default(autoincrement())
  id_squad   Int
  id_usuario String

  squad    Squad    @relation(fields: [id_squad], references: [id])
  usuarios Usuarios @relation(fields: [id_usuario], references: [id])

  @@index([id_squad, id_usuario])
  @@map("squad_integrantes")
}

model Projeto {
  id         String @id @default(uuid())
  nome       String
  id_job     Int
  id_usuario String

  created_at DateTime @default(now())
  updated_at  DateTime @updatedAt

  jobs     Jobs     @relation(fields: [id_job], references: [id])
  usuarios Usuarios @relation(fields: [id_usuario], references: [id])

  @@map("projeto")
}

enum Status {
  ATIVO
  DESATIVADO
}

enum TipoUsuario {
  EMPORIA
  CLIENTE
}
